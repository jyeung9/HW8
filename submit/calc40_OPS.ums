#
#	Julie Yeung (jyeung03) & Max Peicher (mpeich01)
#	calc40.ums
#
# check before getting into entering/waiting state, -48 from ascii dec val --> val
.section init
	 .temps r6, r7
	 .zero r0 
         r0 := 0
	 r3 := r0
			
	init_jumptable:
        # All 256 characters initialized to input error, overwrite with
        # special characters
	if(r3 == 256) goto init_coms using r5	
			r5 := r3 + jumptable
            m[r0][r5] := input_error
			r3 := r3 + 1
			goto init_jumptable
    jumptable:
	 	.space 256	
	 # allocating space jtable name comes first

.section rodata
    init_coms:          # overwrites jumptable with special characters
        r3 := '0'       # set counter to 0, used in init_digit_in_jt loop
        m[r0][jumptable + ' '] := space
        m[r0][jumptable + '\n']:= newline
        m[r0][jumptable + '+'] := add
        m[r0][jumptable + '-'] := sub
        m[r0][jumptable + '*'] := mul
        m[r0][jumptable + '/'] := div
        m[r0][jumptable + '|'] := bor   # bitwise or operation
        m[r0][jumptable + '&'] := band # bitwise and operation
        m[r0][jumptable + 'c'] := change_sign
        m[r0][jumptable + '~'] := bit_comp
        m[r0][jumptable + 's'] := swap
        m[r0][jumptable + 'd'] := dup
        m[r0][jumptable + 'p'] := pop_top
        m[r0][jumptable + 'z'] := zero

    # initializes jumptable for ascii digits '0' to '9'
    init_digit_in_jt:      

        if(r3 == '9') goto g_main using r5      # go to label which calls main
	    r5 := jumptable + r3                    # store location in jumptable 
                                                # which corresponds to ascii in 
                                                # r3
            m[r0][r5] := push_num               # assign that push_num label
            r3 := r3 + 1            # increment counter
            goto init_digit_in_jt

.section text
    main:
       # output " M A I N " 
        goto waiting

    input_error:            # prints out error message for unknown inputs
        output "Unknown character '"	
        output r1
        output "'\n"
	
    waiting: 
        r1 := input()       # takes in user input from stdin
       
        # check if input is digit
        if (r1 <s '0')   goto waiting_with_character using r5       	  	      			      
        if (r1 >s '9')   goto waiting_with_character using r5

        # input is a digit! Push onto value stack
        r1 := r1 - '0'          # save as decimal values
        push r1 on stack r4        
        goto entering           # input = digit, so entering state
    
###    waiting_with_character:     
    
        # passed previous condition, we know we are dealing with pos digit
        if (r1 == -1) goto end_program using r5     # EOF/terminate prog case	
	    goto goto_index

    goto_index:                 # go to location in jtable
        #output "goto index \n"
	    r5 := jumptable + r1
        r5 := m[r0][r5]
        goto r5

    entering:                # there's at least 1 digit in valstack 
    
        r1 := input()   # gets next char

        # check if input is digit; if not, go back to waiting_with_character       
        if (r1 <s '0')   goto waiting_with_character using r5    
        if (r1 >s '9')   goto waiting_with_character using r5
        
        r1 := r1 - '0'       # get number value to add input with 
                             # (number popped from stack * 10)
        pop r7 off stack r4
        r7 := r7 * 10
        r7 := r7 + r1
        push r7 on stack r4       # push result back onto value stack
        goto entering
        
    check_one_arg:                # error checking for unary operators
        if (r4 == endvaluestack) goto err_1_arg using r5
        goto r1                   # return back to the calling unary operation 

    err_1_arg:                    # error output for unary commands
        output "Stack underflow---expected at least 1 element\n"
        goto waiting

    check_two_args:                 # error checking for binary operators
            if (r4 == endvaluestack) goto err_2_args using r5
	        pop r5 off stack r4     # pop off/store top element in r5 
            r3 := r4                # r3 keeps track of next element in stack
	        push r5 on stack r4     # push element stored in r5 back on stack
            if (r3 == endvaluestack) goto err_2_args using r5
	        goto r1               # return back to the calling binary operation

    err_2_args:                     # error output for binary commands
        output "Stack underflow---expected at least 2 elements\n"
        goto waiting

    push_num:                    # pushes digit 0-9 onto value stack
         output "// PUSHING NUM //"
         # while not end of input (newline)
         r7 := r1 - '0' using r5
         push r7 on stack r4      # push digit onto value stack
         goto entering            # go to entering state
    space:                        # space does nothing, returns to waiting
         goto waiting
    newline:                      # calls on print value stack recursively
         r3 := r4          # sets r3 as our stack pointer for recursive print
         goto print_rec using r5
         goto print_d

    print_rec:                      # prints out valstack contents recursively 
         if (r3 == endvaluestack) goto print_d using r5 # end stack, go print
            r5 := m[r0][r3]         # store stack pointer
            push r3 on stack r2     # save stack pointer on call stack
            push r5 on stack r2   

            goto print_d linking r1 # go print digits 
            pop r3 off stack r2     # pop stack pointer off to restore
            r3 := r3 + 1            # get next elem in callstack

            goto print_rec

    add:
        goto check_two_args linking r1  # check if there are 2 args
        pop r3 off stack r4             # pop two values off stack r4
        pop r5 off stack r4
        r1 := r3 + r5                   # store sum in register r1      
        push r1 on stack r4             # store result back onto value stack
        goto waiting
        
    sub:
        goto check_two_args linking r1  # check if there are 2 args
        pop r3 off stack r4             # pop/save 2 values off stack r4
        pop r5 off stack r4
        r3 := r5 - r3                   # store difference in r3  
        push r3 on stack r4             # push result back onto stack r4
        goto waiting                    

    mul:
        goto check_two_args linking r1  # check if 2 args
        pop r3 off stack r4             # pop/save 2 values off stack r4
        pop r5 off stack r4             

        r1 := r5 * r3                   # multiply two popped values
        push r1 on stack r4             # store result back onto valstack
        goto waiting
    
    div:
       goto check_two_args linking r1   # error check
       
       pop r3 off  stack r4		                # pop y off stack
       if (r3 == r0) goto div_zero using r5 	# division by zero case
       if (r3 <s r0) goto div_y_neg using r5	# if one num is negative case
       
       pop r1 off stack r4
       if (r1 <s r0) goto div_x_neg using r5	#division if one num is negative

       # if we made it to this point, we are no longer dividing by negative
       # values, so we then perform regular division
       
       r1 := r1 / r3
       push r1 on stack r4 #push result onto val stack
       goto waiting
  
    div_zero:
	push r3 on stack r4
	output "Division by zero\n"
	goto waiting

    div_y_neg: #div where first num popped off valstack is neg 
	
	pop r1 off stack r4 # get x off stack
	if (r1 <s r0)	goto div_both_neg using r5 #check if both nums are neg	

	r3 := r3 * -1 # div by positive and then mult by -1

	r1 := r1 / r3
	r1 := r1 * -1
	push r1 on stack r4 #push result onto val stack
	goto waiting

    div_x_neg: # div where second num popped off valstack is neg
    	       # if we made it to this case, we know that the first val we 
               # checked was positive, so the resulting quotient must be 
               # negative

    	r1 := r1 * -1          # make pos for divison
    	r1 := r1/ r3 
    	r1 := r1 * -1          # then make negative
    	push r1 on stack r4    # push result onto val stack
    	goto waiting
	
    div_both_neg:
    	r1 := r1 * -1  #turn r1 to pos val
    	r3 := r3 * -1  #turn r2 to pos val
    	r1 := r1 / r3
    	push r1 on stack r4 # push result onto val stack
    	goto waiting

    end_program:       # calls halt to end our program
        halt

     bor:                                     # bitwise or operation
       goto check_two_args linking r1         # checks if 2 args on valstack
        pop r3 off stack r4
        pop r5 off stack r4
        r1 := r5 | r3                   # two values popped off, or operation
        push r1 on stack r4             # result pushed back onto valstack
        goto waiting

    band:                                     # bitwise and operation
        goto check_two_args linking r1
        pop r3 off stack r4                 # pop 2 values off valstack,
                                            # bitwise and, push back on stack
        pop r5 off stack r4
        r1 := r3 & r5
        push r1 on stack r4
        goto waiting

    # UNARY OPERATORS: all below operations only require 1 value from valstack 

    change_sign:                            # changes sign of val at top
                                              of valstack to opposite 
        goto check_one_arg linking r1       # error check for 1+ arg
        pop r3 off stack r4                 # pop off top number, *-1
                                            # to change to opp sign, then
                                            # push result back onto valstack
        r1 := r3 * -1
        push r1 on stack r4  
        goto waiting

    bit_comp:
        goto check_one_arg linking r1       # error checking
        pop r3 off stack r4                 # store into r3 top elem of r4
        r5 := ~r3                           # store in r5 bitwise complement
        push r5 on stack r4                 # push result back onto stack
        goto waiting

    swap:
        goto check_two_args linking r1
        pop r3 off stack r4     # first elem
        pop r5 off stack r4     # second elem
        push r3 on stack r4     # push first elem
        push r5 on stack r4     # push second elem
        goto waiting    
    dup: 
        goto check_one_arg linking r1       # error check
        pop r3 off stack r4
        r5 := r3                            # store num in r3 into r5
        push r3 on stack r4                 # push both r3 & r5 to duplicate
        push r5 on stack r4
        goto waiting

    pop_top: 
        goto check_one_arg linking r1       # error check
        pop stack r4                        # pops top element of stack
        goto waiting
    
    zero:                                   # pops off all elements in valstack
        goto check_one_arg linking r1       # error check
        if(r4 == endvaluestack) goto waiting using r5
        pop r3 off stack r4
        goto zero



    
    

	  


