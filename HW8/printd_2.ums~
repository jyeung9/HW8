#
#	printd.ums
#	Prints out UM words in decimal format
#	register r3: stores 
#

#
#	register r1 checks input for EOF, pushes onto appropriate stack if not
#	register r4 is a stack with input digits, in reversed order that we want
#	register r2 is call stack, receives digits from r6, then outputs 
#
.section init
	 .zero r0
	 .temps r6,r7

.section text
 
   print_d:
	 
	 output "\n >>> "
	 
	 pop r3 off stack r2
	 
         push r1 on stack r2	# save return address	 
	 
	# r7 := r3 + '0'
	
	#output r7
	goto print_pos linking r1 

	pop r1 off stack r2
	goto r1

	 
	 output "alsjfdsalf \n"
	 pop r1 off stack r2
	 goto r1 

    print_pos:

	output " in print_pos \n"
        # push everything to other stack, get correct order
         r5 := r3 / 10
         if (r5 == r0) goto add_last_num using r5
         r5 := r3 mod 10   # stores remainder
	 
	 r5 := r5 + '0'
	  pop r1 off stack r2
	 goto r1 

	 push r5 on stack r2
	 
         r3 := r3 / 10
         goto print_pos

    print_neg:
        output "print_neg\n"
        output '-'
        r3 := r3 * -1
        goto print_pos

    add_last_num:
	output "add_last\n"
	r3 := r3 + '0'
	push r3 on stack r2
	goto print_nums

    print_nums:	
   	output " printstatement \n"
	pop r3 off stack r2
	if (r3 <s '0') goto r1 using r5
	if (r3 >s '9') goto r1 using r5
	
        output r3
        goto print_nums

        


	   	
      	

