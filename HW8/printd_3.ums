#
#	printd.ums
#	Prints out UM words in decimal format
#	register r3: stores 
#

#
#	register r1 checks input for EOF, pushes onto appropriate stack if not
#	register r4 is a stack with input digits, in reversed order that we want
#	register r2 is call stack, receives digits from r6, then outputs 
#
.section init
	 .zero r0
	 .temps r6,r7

.section text
 
   print_d:
		#output " INSIDE PRINT_D " 
		if (r2 == endcallstack) goto waiting using r5
		
		output ">>> "
		
		pop r3 off stack r2		# gets value at top of callstack, store into r3
		push r1 on stack r2		# save return address	 

		#r3 = r3 - '0'
		#if (r3 == r0) goto print_zero using r5
		if(r3 <s r0) goto print_neg using r5	# check if negative num
		goto print_pos linking r1  				# goes to print_pos
		output '\n'
		# goto waiting
		goto r3 

    print_pos:
		#output " PRINT _POS "
		# push everything to other stack, get correct order
		r5 := r3 / 10
		if (r5 == r0) goto add_last_num using r5
			
		r5 := r3 mod 10   # stores remainder
		r5 := r5 + '0'
			
		push r5 on stack r2
		# r5 := r5 - '0'
	#	output r5
	#	output '\n'
		
		r3 := r3 / 10

		#output " this is r3 : " 
		#output r3
		#output '\n '

		goto print_pos

    print_neg:
		#output " INSIDE PRINT_NEG "
        output '-'

        r3 := r3 * -1
        goto print_pos

	#print_zero:			# deals with the leading zero case
	#	output r3
	#	goto waiting

    add_last_num:
#		output " inside add last num "
		r3 := r3 + '0'
		push r3 on stack r2
		goto print_nums

    print_nums:	
#		output " inside print_nums "

		pop r3 off stack r2

		if (r3 <s '0') goto r1 using r5
		if (r3 >s '9') goto r1 using r5
	
        output r3
        goto print_nums

        


	   	
      	

