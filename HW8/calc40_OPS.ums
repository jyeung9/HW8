#
#	Julie Yeung (jyeung03) & Max Peicher (mpeich01)
#	calc40.ums
#
# check before getting into entering/waiting state, -48 from ascii dec val --> val
.section init
	 .temps r6, r7
	 .zero r0 
         r0 := 0
	 r3 := r0
			
	init_jumptable:
		# r3 is our incrementer "i"
        # if all 256 characters initialized to input error, overwrite with
        # special characters
	if(r3 == 256) goto init_coms using r5	
			r5 := r3 + jumptable
            m[r0][r5] := input_error
			r3 := r3 + 1
			goto init_jumptable
    jumptable:
	 	.space 256	
	 # allocating space jtable name comes first

.section rodata



    init_coms:          # overwrites the jumptable with special characters
        r3 := '0'
        m[r0][jumptable + ' '] := space
        m[r0][jumptable + '\n']:= newline
        m[r0][jumptable + '+'] := add
        m[r0][jumptable + '-'] := sub
        m[r0][jumptable + '*'] := mul
      # m[r0][jumptable + '/'] := div
        m[r0][jumptable + '|'] := bor   # bitwise or operation
        m[r0][jumptable + '&'] := band # bitwise and operation
        m[r0][jumptable + 'c'] := change_sign
        m[r0][jumptable + '~'] := bit_comp
        m[r0][jumptable + 's'] := swap
      # m[r0][jumptable + 'd'] := dup
        m[r0][jumptable + 'p'] := pop_top
        m[r0][jumptable + 'z'] := zero

    # initializes jumptable for 'n' command
    init_digit_in_jt:      

        if(r3 == '9') goto g_main using r5
            r5 := jumptable + r3
            m[r0][r5] := push_num
            r3 := r3 + 1
            goto init_digit_in_jt

.section text
    main:
       # output " M A I N " 
        goto waiting

    input_error:
	output "Unknown character '"	# IF INCORRECT OUTPUT, CHECK R7
	output r1
	output "'"
		#goto waiting (??)

    waiting: 
       #output "  wAiTiNG stATE "
       #output '\n'
        r1 := input()
        #output r1 + '0'
        if (r1 <s '0')   goto waiting_with_character using r5      # not a digit -> waiting
        if (r1 >s '9')   goto waiting_with_character using r5

        r1 := r1 - '0'              # save digit as decimal value
        push r1 on stack r4         # save digit to call stack
        #output " pushed to stack r4, value = "
        #output r1 + '0'
        #output '\n'
        goto entering
    
    waiting_with_character:
        #output " // inside waiting w char // "
        #output '\n'
    
        # passed previous condition, we know we are dealing with pos digit

        if (r1 == -1) goto end_program using r5     # EOF via ctrl + d
	   # r3 := '-'
	   # if(r1 == r3) goto check_neg using r5	    # takes care of negative #'s
	    goto goto_index

    goto_index:
        #output "goto index \n"
	    r5 := jumptable + r1
        r5 := m[r0][r5]
        goto r5

    entering: 

       # output " ENTERING "
        #output '\n'
        r1 := input()   # gets next char
	#output " TESTING "
	#output r1
        # if char is not a digit, will pop/push these digits
        # to another stack, multiplying by 10/adding
        # then, we will jump control flow to the operation we read in
        if (r1 <s '0')   goto  waiting_with_character using r5
	      # need to push number to value stack before taking care of non-digit
        if (r1 >s '9')   goto  waiting_with_character using r5
        
        r1 := r1 - '0'
        pop r7 off stack r4
        r7 := r7 * 10
        r7 := r7 + r1
        push r7 on stack r4       # store digit onto value stack
        goto entering

    #    push that to where ever values should be stored (value stack?)
    #    jump to location of non-digit character
    #    that should execute the operation
    #    go back to waiting
        
    check_two_args:                 # error checking for binary operators
            output " IN CHECK TWO ARGS "
            if (r4 == endvaluestack) goto err_2_args using r5
            r5 := r4 + 1
            r3 := m[r0][r5]
            if (r5 == endvaluestack) goto err_2_args using r5

    err_2_args:
        output "Stack underflow---expected at least 2 elements\n"
        goto waiting

    push_num:                    # pushes digit 0-9 onto value stack
         output "// PUSHING NUM //"
         # while not end of input (newline)
         r7 := r1 - '0' using r5
         push r7 on stack r4      # push digit onto value stack
         goto entering            # go to entering state
    space:
         #output "--- SPACE ---"
         #output '\n'
         goto waiting
    newline:
      #   output "// IN NEWLINE //"
      #   output '\n'
         r3 := r4          # sets r3 as our stack pointer for recursive print
         goto print_rec using r5
        
        # pop r7 off stack r4            # pops value off top of value stack
         #push r7 on stack r2            # and into call stack for printing m[0][r3]
        # push r7 on stack r4            
	# output " BEFORE PRINT_D "
    #recursively go to print d while valstack != empty
	    goto print_d

    print_rec:
       # output " in print_rec " 
         if (r3 == endvaluestack) goto print_d using r5
            r5 := m[r0][r3]
            push r3 on stack r2
            push r5 on stack r2

            goto print_d linking r1
            pop r3 off stack r2
            r3 := r3 + 1

            goto print_rec

    add:
        #output " INSIDE ADD "
        pop r3 off stack r4             # pop two values off stack r4
        pop r5 off stack r4
        r1 := r3 + r5           # store sum into register r1      
        push r1 on stack r4             # store result back onto value stack 
                                        # to ensure that there are at least 2 
                                        # arguments for add operand between 
                                        # computations
        goto waiting
       # output " pushed back onto stack r4, value = "
       # output r1 + '0'
       # output '\n'
        
    sub:
       # output " INSIDE SUB "
        pop r3 off stack r4
        pop r5 off stack r4
        r1 := r5 - r3
        #if(r1 <s r0) goto waiting_with_character linking r1
        push r1 on stack r4
        goto waiting
    mul:
        #output " INSIDE MUL "
        pop r3 off stack r4
        pop r5 off stack r4
        r1 := r5 * r3
        push r1 on stack r4
        goto waiting
    
    #div:
       # output " INSIDE DIV "
       # pop r3 off stack r4
       # pop r5 off stack r4
       # divide by zero
       # negative denom
       # negative numerator
       # negative both
       # r1 := r5 * r3
       # push r1 on stack r4
       # goto waiting

    end_program:
       # output "// ENDING PROGRAM //"
        halt

    # TEST LATER
     bor:
       # output " INSIDE BOR "
        pop r3 off stack r4
        pop r5 off stack r4
        r1 := r5 | r3
        push r1 on stack r4
        goto waiting

    # TEST LATER 
    band:
        #output " INSIDE BAND "
        pop r3 off stack r4
        pop r5 off stack r4
        r1 := r4 & r3
        push r1 on stack r4
        goto waiting

    # ------UNARY OPERATORS 

    change_sign: 
        #output " INSIDE CHANGE_SIGN "
        pop r3 off stack r4
        r1 := r3 * -1
        push r1 on stack r4
        goto waiting

    bit_comp:
        pop r3 off stack r4
        r5 := ~r3
        push r5 on stack r4
        goto waiting

    swap:
        pop r3 off stack r4     # first elem
        pop r5 off stack r4     # second elem
        push r3 on stack r4     # push first elem
        push r5 on stack r4     # push second elem
        
    pop_top: 
        pop stack r4
        goto waiting
    
    zero: 
        if(r4 == endvaluestack) goto waiting using r5
        pop r3 off stack r4
        goto zero



    
    

	  


