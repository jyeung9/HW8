#
#	printd.ums
#	Prints out UM words in decimal format
#	register r3: stores 
#

#
#	register r1 checks input for EOF, pushes onto appropriate stack if not
#	register r4 is a stack with input digits, in reversed order that we want
#	register r2 is call stack, receives digits from r6, then outputs 
#
.section init
	 .zero r0
	 .temps r6,r7
.section text
 
# initialize stack pointers to have EOF at bottom
   print_d:
        pop r3 off stack r2   # pops the top element of call stack
        goto print_pos
        #if (r5 <s 0) goto print_neg using r6
   print_pos:
        r5 := r3 / 10
        if (r5 == r0) goto print_last_digit using r5
        r5 := r3 mod 10   # stores remainder
        r5 := r5 + '0'           # add 48 before outputting to get ascii char
        output r5
        r3 := r3 / 10
        goto print_pos
   print_neg:
       # output "print_neg"
        output '-'
        r3 := r3 * -1
        goto print_pos
    print_last_digit:
        r3 := r3 + '0'           # to print out as an ascii, add 48
        output r3
        goto waiting


	   	
      	

