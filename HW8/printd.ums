#
#	printd.ums
#	Prints out UM words in decimal format
#	register r3: stores 
#

#
#	register r1 checks input for EOF, pushes onto appropriate stack if not
#	register r4 is a stack with input digits, in reversed order that we want
#	register r2 is call stack, receives digits from r6, then outputs 
#
.section init
	 .zero r0
	 .temps r6,r7
.section text
 
# initialize stack pointers to have EOF at bottom
   main:
	push r3 on stack r2
   	goto loading_valstack
	
   loading_valstack:
		r1 := input() 
		r3 := endvaluestack
	 
	 	# change this: should be r1 == EOF
        if (r1 <s 0) goto stop_program
		if (r1 == r3) goto loading_callstack using r5	
        output "in loop of valstack"
		output r1
        push r1 on stack r4	  # loading top val of valstack r4 into r7
        output "pushed r1 onto r4"
	    goto loading_valstack

   loading_callstack:
		output "inside callstack"
		
		output "line 37"
   		if(r1 == r3) goto print_callstack using r5
		output "line 39"
		output "line 42"
   		pop r1 off stack r4
   		push r1 on stack r2
   		goto loading_callstack
   
   print_callstack:
		output "inside print_callstack"
   		r6 := endcallstack
		output "line 48"
		if(r1 != r6)  goto end_print using r5     # stores top stack val from r2	
	
		pop r1 off stack r2
    	output r1
		goto print_callstack
	
   stop_program:
		halt
       #pop r3 off stack r2

	   	
      	

